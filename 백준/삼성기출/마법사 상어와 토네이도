#include<iostream>
#include<algorithm>
#include<queue>
using namespace std;
int n;
int arr[500][500];
int move_i[4][10] = { { -1, 1, -1, 1, -1, 1, -2, 2, 0, 0 },{ 0, 0, 1, 1, 2, 2, 1, 1, 3, 2 },
				  { -1, 1, -1, 1, -1, 1, -2, 2, 0, 0}, { 0, 0,-1, -1, -2, -2, -1, -1, -3, -2} };

int move_j[4][10] = { { 0, 0, -1, -1, -2, -2, -1, -1, -3, -2}, { -1, 1, -1, 1, -1, 1, -2, 2, 0, 0},
				  { 0, 0, 1, 1, 2, 2, 1, 1, 3, 2}, {-1, 1, -1, 1, -1, 1, -2, 2, 0, 0} };

double weight[9] =  {0.01, 0.01, 0.07, 0.07, 0.1, 0.1, 0.02, 0.02, 0.05 };
int ans;
struct save {
	int i;
	int j;
};
void solve(int i,int j,int view) {	
	
	int save;
	int val;
	if (view == 0) {
		save = arr[i][j - 1];
	}
	else if (view == 1)save = arr[i + 1][j];
	else if (view == 2)save = arr[i][j + 1];
	else save = arr[i - 1][j];
	val = save;
	if (view == 0) {
		arr[i][j - 1] = 0;
	}
	else if (view == 1)arr[i + 1][j] = 0;
	else if (view == 2)arr[i][j + 1] = 0;
	else arr[i - 1][j] = 0;
		for (int k = 0; k < 9; k++) {
			int ni = i + move_i[view][k];
			int nj = j + move_j[view][k];
			int v = int(val * weight[k]);
			save -= v;
			if (ni < 1 || nj < 1 || ni > n || nj > n) {
				ans += v;
				continue;
			}
			arr[ni][nj] += v;
		}
	
	int ni = i+ move_i[view][9];
	int nj = j+ move_j[view][9];
	if (ni < 1 || nj < 1 || ni > n || nj > n) {
		ans += save;

	}
	else arr[ni][nj] += save;
	
}

int main()
{
	cin >>n;
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++) {
			cin >> arr[i][j];
		}
	}
	int roop = 1;
	int cont = n / 2;
	int y = n / 2 + 1;
	int x = n / 2+1;

	solve(y,x,0);
	x--;
	while (cont--) {
		for (int k = 1; k <= roop; k ++) {
			solve(y, x,1);
			y++;
		}
		roop++;
		for (int k = 1; k <= roop; k++) {
			solve(y, x,2);
			x++;
		}
		for (int k = 1; k <= roop; k++) {
			solve(y, x,3);
			y--;
		}
		roop++;
		for (int k = 1; k <= roop; k++) {
			solve(y, x,0);
			if (y == 1 && x == 1)break;
			x--;
		}
	}
	cout << ans;
	return 0;
}
