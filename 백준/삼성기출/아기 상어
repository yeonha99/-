#include<iostream>
#include<queue>
using namespace std;
const int MAX = 22;

int arr[MAX][MAX];
int visit[MAX][MAX];
int n;
int shark = 2;
int si;
int sj;
struct save {
	int y;
	int x;
	int cnt;
};
int minfish = 987654321;
int eat = 0;
int answer = 0;
bool inside(int y, int x) {
	return y >= 0 && y < n && x >= 0 && x < n;
}
int dy[4] = { -1,1,0,0 };
int dx[4] = { 0,0,-1,1 };
void BFS() {
	queue <save> q;
	q.push({si,sj,1});
	visit[si][sj] = 1;
	minfish = 987654321;
	while (!q.empty()) {
		auto it = q.front();
		q.pop();
		for (int k = 0; k < 4; k++) {
			int y = it.y + dy[k];
			int x = it.x + dx[k];
			if (inside(y, x) && arr[y][x]<=shark&&visit[y][x]==0) {
				if (arr[y][x] != 0&&arr[y][x]<shark) {
					if (minfish > it.cnt + 1)minfish = it.cnt + 1;
				}
				q.push({ y,x,it.cnt + 1 });
				visit[y][x] = it.cnt + 1;
			}
		}
	}
}
void solve() {

	while (1) {
		BFS();
		bool ok = 0;
		if (minfish == 987654321)break;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				
				if (arr[i][j]>0&&arr[i][j] < shark) {
					if (visit[i][j] == minfish) {
						ok = 1;
						eat++;
						arr[i][j] = 0;
						si = i;
						sj = j;
						answer += minfish - 1;
						break;
					}
				}
			}
			if (ok == 1)break;
		}
		if (eat == shark) {
			shark++;
			eat = 0;
		}
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				visit[i][j] = 0;
			}
		}
	}
}
int main() {
	cin >> n;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cin >> arr[i][j];
			if (arr[i][j] == 9) {
				si = i;
				sj = j;
				arr[i][j] = 0;
			}
		}
	}
	solve();
	cout << answer << endl;

	return 0;
}
