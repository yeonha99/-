#include<iostream>
#include<cstring>
#include<vector>
#include<algorithm>
using namespace std;
int n;
int m;
int arr[51][51];
int val[51][51];
int answer = 99999;
struct save {
	int i;
	int j;
};
vector<save> v;
bool visit[14];
void DFS(int top,int index) {
	if (top == m) {
		for (int i = 0; i <= n; i++) {
			for (int j = 0; j <= n; j++)
				val[i][j] = 99999;
		}
		for (int k = 0; k <v.size(); k++) {
			if (visit[k] == 1) {
				for (int i = 1; i <= n; i++) {
					for (int j = 1; j <= n; j++) {
						if (arr[i][j] == 1) {
							int ans = v[k].i - i;	
							if (ans < 0)ans *=-1;
							int ans2 = v[k].j - j;
							if (ans2 < 0)ans2 *=-1;
							ans += ans2;
							val[i][j]=min(ans,val[i][j]);
						}
					}
				}
			}
		}
		int result=0;
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= n; j++)
			{
				if (val[i][j] != 99999)result += val[i][j];
			}
		}
		answer=min(result, answer);
		
		return;
	}
	for (int i = index+1; i < v.size(); i++) {
		visit[i] = 1;
		DFS(top + 1, i);
		visit[i] = 0;
	}
}
int main()
{
	cin >> n >> m;
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++)
		{
			cin >> arr[i][j];
			if (arr[i][j] == 2)
				v.push_back({i,j});
		} 
	}
	for (int k = 0; k < v.size()-m+1; k++) {
		
		visit[k] = 1;
		DFS(1, k);
		visit[k] = 0;
		
	}
	cout << answer << endl;
	return 0;
}
