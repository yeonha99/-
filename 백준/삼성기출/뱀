#include<iostream>
#include<algorithm>
#include<queue>
using namespace std;
int arr[101][101];
int n;
int k;
int change;
bool moves[101][101];
struct save {
	int t;
	char view;
};
struct tail {
	int i;
	int j;
};
queue<save> q;
int main() {
	cin >> n >> k;
	int i;
	int j;
	while (k--) {
		cin >> i>>j;
		arr[i][j] = 1;
	}
	cin >> change;
	int t;
	char d;
	while (change--) {
		cin >> t >> d;
		q.push({ t,d });
	}
	int roop = 1;
	i = 1;
	j = 1;
	int dir = 0;
	moves[1][1] = 1;
	queue<tail> tq;
	tq.push({1,1});
	while (1)
	{
		if (dir == 0)j++;
		else if (dir == 1)i++;
		else if (dir == 2)j--;
		else if (dir == 3)i--;

		if (i<1 || i>n || j<1 || j>n) break;
		if (moves[i][j] == 1)break;
		
		moves[i][j] = 1;
		tq.push({ i,j });

		if (arr[i][j] == 1) {
			arr[i][j] = 0;
		}
		else {
			auto it=tq.front();
			moves[it.i][it.j] = 0;
			tq.pop();
		}
		if (!q.empty() && q.front().t == roop) {
			auto it = q.front();
			q.pop();
			if (it.view == 'D') {
				dir++;
				if (dir == 4)dir = 0;
			}
			else {
				dir--;
				if (dir == -1)dir = 3;
			}
		}
		roop++;
	}
	cout << roop << endl;
}
