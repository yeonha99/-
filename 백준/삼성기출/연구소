#include<iostream>
#include<algorithm>
#include<queue>
using namespace std;
int r, c;
int arr[9][9];
int move_i[4] = {1,0,0,-1};
int move_j[4] = {0,-1,1,0};
int ans;
int temp[9][9];
struct save {
	int i;
	int j;
};
void BFS() {
	queue<save> q;
	for (int i = 1; i <= r; i++) {
		for (int j = 1; j <= c; j++) {
			if(temp[i][j]==2)	q.push({ i,j });
			
		}
	}
	while (!q.empty()) {
		auto it = q.front();
		q.pop();
		for (int k = 0; k < 4; k++) {
			int ni = it.i + move_i[k];
			int nj = it.j + move_j[k];
			if (ni < 1 || nj < 1 || ni > r || nj > c || temp[ni][nj] != 0)continue;
			temp[ni][nj] = 2;
			q.push({ ni ,nj });
		}
	}
	int sum = 0;
	for (int i = 1; i <= r; i++) {
		for (int j = 1; j <= c; j++) {
			if (temp[i][j] == 0) sum++;
		}
	}
	ans=max(sum, ans);
}
void DFS(int top,int id,int jd) {
	if (top == 3) {
		for (int i = 1; i <= r; i++) {
			for (int j = 1; j <= c; j++) {
				temp[i][j] = arr[i][j];
			}
		}
		BFS();
		return;
	}
	jd++;
	for (int y = id; y <= r; y++) {
		for (int x = jd; x <= c; x++) {
			if (arr[y][x] == 0) {
				arr[y][x] = 1;
				DFS(top + 1,y,x);
				arr[y][x] = 0;
			}
		}
		jd = 1;
	}
}
int main()
{
	cin >> r >> c;
	for (int i = 1; i <= r; i++) {
		for (int j = 1; j <= c; j++) {
			cin >> arr[i][j];
		}
	}
	DFS(0,1,0);
	cout << ans;
	return 0;
}
