#include <iostream>
#include <algorithm>
#include <cmath>
#include<cstring>
#include<queue>
using namespace std;
int N;
int Q;
int arr[129][129];
int move_i[4] = {0,0,1,-1};
int move_j[4] = { 1,-1,0,0 };
int copys[129][129];
bool visit[129][129];

struct save {
	int i;
	int j;
};
int BFS(int i,int j,int size) {
	queue<save> q;
	q.push({ i,j });
	visit[i][j] = 1;
	int sum =1;
	while (!q.empty()) {
		auto it = q.front();
		q.pop();
		for (int k = 0; k < 4; k++) {
			int y = it.i + move_i[k];
			int x = it.j + move_j[k];
			if (y<1 || x<1 || y>size || x>size)continue;
			if (arr[y][x] > 0 && visit[y][x] != 1) {
				sum++;
				visit[y][x] = 1;
				q.push({ y,x });
			}
		}
	}
	return sum;
}
void solve(int l,int size,int i,int j) {
	if (l != size) {
		size = size / 2;
		solve(l, size, i, j);
		solve(l, size, i, j+size);
		solve(l, size, i+size, j);
		solve(l, size, i + size, j+size);
	}
	else {
		int indx = j+l-1;
		
		for (int y = i; y < i + l; y++) {
			int it = i;
			for (int x = j; x < j + l; x++) {
				copys[it][indx] = arr[y][x];
				it++;
			}
			indx--;
		}
		for (int y = i; y < i + l; y++) {
			for (int x = j; x < j + l; x++) {
				arr[y][x]=copys[y][x];
			}
		}
		return;
	}
}
int main(void)
{
	cin >> N >> Q;
	int size = pow(2, N);
	for (int i = 1; i <= size; i++)
		for (int j = 1; j <= size; j++)
			cin >> arr[i][j];
	int L;
	while (Q--) {
		cin >> L;
		solve(pow(2, L), size,1,1);
		for (int i = 1; i <= size; i++) {
			for (int j = 1; j <= size; j++) {
				arr[i][j] = copys[i][j];
			}
		}
		int copys[129][129];
		for (int i = 1; i <= size; i++) {
			for (int j = 1; j <= size; j++) {
				int check = 0;
				copys[i][j] = arr[i][j];
				for (int k = 0; k < 4; k++) {
					int y = i + move_i[k];
					int x = j + move_j[k];
					
					if (y<1 || x<1 || y>size || x>size)continue;
					if (arr[y][x]>0)check++;
				}
				if (check < 3) {
					copys[i][j]--;
				}
			}
		}
		for (int i = 1; i <= size; i++) {
			for (int j = 1; j <= size; j++) {
				arr[i][j] = copys[i][j];
			}
		}
	}
	int sum = 0;
	int maxv = 0;
	for (int i = 1; i <= size; i++) {
		for (int j = 1; j <= size; j++) {
			if (visit[i][j] != 1 && arr[i][j] > 0) {
			maxv=max(maxv,BFS(i, j, size));
			}
			if (arr[i][j] <= 0)continue;
			sum += arr[i][j];
		}
	}
	cout << sum << endl;
	if (maxv == 1)maxv = 0;
	cout << maxv << endl;
	return 0;
}
