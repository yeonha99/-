#include<iostream>
#include<cstring>
#include<string>
using namespace std;
int n;
int arr[5][9];
int copys[5][9];
bool visit[5];

struct save {
	int num;
	int view;
};
void DFS(int num, int view) {
	if (view == -1) {
		int save = copys[num][1];
		for (int i = 1; i < 8; i++) {
			copys[num][i] = copys[num][i + 1];
		}
		copys[num][8] = save;
	}
	else {
		int save = copys[num][8];
		for (int i = 8; i > 1; i--) {
			copys[num][i] = copys[num][i - 1];
		}
		copys[num][1] = save;
	}
	if (num + 1 <= 4 && arr[num][3] != arr[num + 1][7]) {
		if (visit[num + 1] != 1) {
			visit[num + 1] = 1;
			DFS(num + 1, view * -1);
		}
	}
	if (num - 1 > 0 && arr[num][7] != arr[num - 1][3]) {
		if (visit[num - 1] != 1) {
			visit[num - 1] = 1;
			DFS(num - 1, view * -1);
		}

	}
	else return;
}
int main()
{
	int index = 1;
	string s;
	for (int i = 1; i <= 4; i++) {
		cin >> s;
		for (int j = 1; j <= 8; j++) {
			arr[i][j] = stoi(s.substr(j - 1, 1));
			copys[i][j] = arr[i][j];
		}
	}
	cin >> n;
	for (int i = 0; i < n; i++) {
		int num;
		int view;
		cin >> num >> view;
		visit[num]=1;
		DFS(num, view);
		memset(visit, 0, sizeof(visit));
		for (int k = 1; k <= 4; k++) {
			for (int j = 1; j <= 8; j++) {
				arr[k][j] = copys[k][j];
			}
		}
	}
	int ans = 0;
	for (int i = 1; i <= 4; i++) {
		if (i == 1 && arr[i][1] == 1)
			ans += 1;
		else if (i == 2 && arr[i][1] == 1)
			ans += 2;
		else if (i == 3 && arr[i][1] == 1)
			ans += 4;
		else if (i == 4 && arr[i][1] == 1)
			ans += 8;
	}
	cout << ans << endl;
	return 0;
}
