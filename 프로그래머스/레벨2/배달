#include <iostream>
#include <vector>
#include <queue>
#include <cstring>
using namespace std;
 
int MAP[51][51];
int dist[51];
struct save{
    int go;
    int val;
};
int bfs(int N,int K)
{   dist[1] = 0;
    int ret=0;
    queue<save> q;
    for(int i=1;i<=N;i++)
        if(dist[i]<=K)
            q.push({i,dist[i]});
 
    while(!q.empty())
    {
        int idx = q.front().go;
        int score = q.front().val;
 
        for(int i=2;i<=N;i++)
        {
            if(i==idx) continue;
            if(score + MAP[idx][i] <= K && score + MAP[idx][i] <= dist[i])
            {    dist[i] = score + MAP[idx][i];
                q.push({i, dist[i]});
            }
 
        }
        q.pop();
    }
    for(int i=1;i<=N;i++)
        if(dist[i]<=K) ret++;
    return ret;
}
int solution(int N, vector<vector<int> > road, int K) {
    memset(MAP,10001,sizeof(MAP));
    memset(dist, 10001, sizeof(dist));
    for(int i=0;i<road.size();i++)
    {if(MAP[road[i][0]][road[i][1]] < road[i][2])continue;
        MAP[road[i][0]][road[i][1]] = road[i][2];
        MAP[road[i][1]][road[i][0]] = road[i][2];
    }
    for(int i=1;i<=N;i++)
        dist[i] = MAP[1][i];

    int answer = bfs(N,K);  
    return answer;
}
